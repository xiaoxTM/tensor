namespace aop {

    template<typename To, typename T1, typename T2>
    class Equal {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] == static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src2[i] == static_cast<T2>(src1[i]));
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class NotEqual {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] != static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src2[i] != static_cast<T2>(src1[i]));
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Greater {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] > static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(static_cast<T2>(src1[i]) > src2[i]);
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class GreaterEqual {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] >= static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(static_cast<T2>(src1[i]) >= src2[i]);
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Less {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] < static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(static_cast<T2>(src1[i]) < src2[i]);
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class LessEqual {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] <= static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(static_cast<T2>(src1[i]) <= src2[i]);
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Add {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] + static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(static_cast<T2>(src1[i]) + src2[i]);
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Subtract {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] - static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(static_cast<T2>(src1[i]) - src2[i]);
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Multiply {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] * static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src2[i] * static_cast<T2>(src1[i]));
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Divide {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] / static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(static_cast<T2>(src1[i]) / src2[i]);
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Mod {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src1[i] % static_cast<T1>(src2[i]));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(src2[i] % static_cast<T2>(src1[i]));
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Pow {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(std::pow(src1[i], static_cast<T1>(src2[i])));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(std::pow(src2[i], static_cast<T2>(src1[i])));
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Maximum {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(std::max(src1[i], static_cast<T1>(src2[i])));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(std::max(src2[i], static_cast<T2>(src1[i])));
                }
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename T1, typename T2>
    class Minimum {
    public:
        static void run(To *dst, const T1 *src1, const T2 *src2, size_t size) {
            u_fun_enter(2, 0);
            if (std::numeric_limits<T1>::max() > std::numeric_limits<T2>::max()) {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(std::min(src1[i], static_cast<T1>(src2[i])));
                }
            } else {
                #ifdef _OPENMP
                #pragma omp parallel for
                #endif
                for (size_t i=0; i<size; ++i) {
                    dst[i] = static_cast<To>(std::min(src2[i], static_cast<T2>(src1[i])));
                }
            }
            u_fun_exit(0, -2);
        }
    };

    // natural logarithm
    template<typename To, typename Ti>
    class Log {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::log(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Log10 {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::log10(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Experiential {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::exp(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class SquareRoot {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::sqrt(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Sine {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::sin(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Cosine {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::cos(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Tangent {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::tan(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class HyperbolicTangent {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::tanh(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Round {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::round(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Ceil {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::ceil(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Floor {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::floor(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class IsInfinite {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::isinf(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class IsNaN {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::isnan(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class IsFinite {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::isfinite(src[i]));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Invert {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(1.0 / src[i]);
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Minus {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            DType dtype = ctype<To>();
            u_assert(dtype != DType::uint8 && dtype != DType::uint16 && dtype != DType::uint32 && dtype != DType::uint64, "cannot do minus on unsigned type, because it may cause overflow");
            DType stype = ctype<Ti>();
            u_assert(stype != DType::uint8 && stype != DType::uint16 && stype != DType::uint32 && stype != DType::uint64, "cannot do minus on unsigned type, because it may cause overflow");
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(-src[i]);
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Clip {
    public:
        static void run(To *dst, const Ti *src, size_t size, double min, double max) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(std::min(std::max(src[i], static_cast<Ti>(min)), static_cast<Ti>(max)));
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Absolute {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(src[i] > 0 ? src[i] : -src[i]);
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Assign {
    public:
        static void run(To *dst, const Ti *src, size_t size) {
            u_fun_enter(2, 0);
            #ifdef _OPENMP
            #pragma omp parallel for
            #endif
            for (size_t i = 0; i < size; ++i) {
                dst[i] = static_cast<To>(src[i]);
            }
            u_fun_exit(0, -2);
        }
    };

    template<typename To, typename Ti>
    class Sum {
    public:
        static To run(const Ti * const src, unsigned int dim_size, size_t prev, size_t later, size_t inner, size_t offset) {
            u_fun_enter(2, 0);
            To sum = 0;
            for (size_t d = 0; d < dim_size; ++d) {
                sum += src[prev * later + d * offset + inner];
            }
            u_fun_exit(0, -2);
            return (sum);
        }
    };

    template<typename To, typename Ti>
    class Mean {
    public:
        static To run(const Ti * const src, unsigned int dim_size, size_t prev, size_t later, size_t inner, size_t offset) {
            u_fun_enter(2, 0);
            double sum = 0;
            for (size_t d = 0; d < dim_size; ++d) {
                sum += src[prev * later + d * offset + inner];
            }
            u_fun_exit(0, -2);
            return (static_cast<To>(sum / dim_size));
        }
    };

    template<typename To, typename Ti>
    class StdDev {
    public:
        static To run(const Ti * const src, unsigned int dim_size, size_t prev, size_t later, size_t inner, size_t offset) {
            u_fun_enter(2, 0);
            double sum = 0;
            for (size_t d = 0; d < dim_size; ++d) {
                sum += src[prev * later + d * offset + inner];
            }
            double mean = sum / dim_size;
            sum = 0;
            for (size_t d = 0; d < dim_size; ++d) {
                sum += std::pow(src[prev * later + d * offset + inner] - mean, 2);
            }
            u_fun_exit(0, -2);
            return (static_cast<To>(std::sqrt(sum / dim_size)));
        }
    };

    template<typename To, typename Ti>
    class Max {
    public:
        static To run(const Ti * const src, unsigned int dim_size, size_t prev, size_t later, size_t inner, size_t offset) {
            u_fun_enter(2, 0);
            Ti max = std::numeric_limits<Ti>::min();
            Ti cnt = std::numeric_limits<Ti>::max();
            for (size_t d = 0; d < dim_size; ++d) {
                cnt = src[prev * later + d * offset + inner];
                if (max < cnt) {
                    max = cnt;
                }
            }
            u_fun_exit(0, -2);
            return (static_cast<To>(max));
        }
    };

    template<typename To, typename Ti>
    class Min {
    public:
        static To run(const Ti * const src, unsigned int dim_size, size_t prev, size_t later, size_t inner, size_t offset) {
            u_fun_enter(2, 0);
            Ti min = std::numeric_limits<Ti>::max();
            Ti cnt = std::numeric_limits<Ti>::min();
            for (unsigned int d = 0; d < dim_size; ++d) {
                cnt = src[prev * later + d * offset + inner];
                if (min > cnt) {
                    min = cnt;
                }
            }
            u_fun_exit(0, -2);
            return (static_cast<To>(min));
        }
    };

    template<typename To, typename Ti>
    class ArgMax {
    public:
        static To run(const Ti * const src, unsigned int dim_size, size_t prev, size_t later, size_t inner, size_t offset) {
            u_fun_enter(2, 0);
            Ti max = std::numeric_limits<Ti>::min();
            Ti cnt = std::numeric_limits<Ti>::max();
            To index = static_cast<To>(0);
            for (size_t d = 0; d < dim_size; ++d) {
                cnt = src[prev * later + d * offset + inner];
                if (max < cnt) {
                    max = cnt;
                    index = static_cast<To>(d);
                }
            }
            u_fun_exit(0, -2);
            return (index);
        }
    };

    template<typename To, typename Ti>
    class ArgMin {
    public:
        static To run(const Ti * const src, unsigned int dim_size, size_t prev, size_t later, size_t inner, size_t offset) {
            u_fun_enter(2, 0);
            Ti min = std::numeric_limits<Ti>::max();
            Ti cnt = std::numeric_limits<Ti>::min();
            To index = static_cast<To>(0);
            for (unsigned int d = 0; d < dim_size; ++d) {
                cnt = src[prev * later + d * offset + inner];
                if (min > cnt) {
                    min = cnt;
                    index = static_cast<To>(d);
                }
            }
            u_fun_exit(0, -2);
            return (index);
        }
    };
}
